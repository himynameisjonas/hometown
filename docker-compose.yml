version: '3'
services:
  db:
    restart: always
    image: postgres:14-alpine
    shm_size: 256mb
    networks:
      - internal_network
    volumes:
      - ./postgres14:/var/lib/postgresql/data
    # added from the default, otherwise you'll need to manually create a `mastodon` db and user/role
    env_file: db.env
    environment:
      - 'POSTGRES_HOST_AUTH_METHOD=trust'

  redis:
    restart: always
    image: redis:7-alpine
    networks:
      - internal_network
    healthcheck:
      test: [ 'CMD', 'redis-cli', 'ping' ]
    volumes:
      - ./redis:/data

  # es:
  #   restart: always
  #   image: docker.elastic.co/elasticsearch/elasticsearch:7.17.4
  #   environment:
  #     - "ES_JAVA_OPTS=-Xms512m -Xmx512m -Des.enforce.bootstrap.checks=true"
  #     - "xpack.license.self_generated.type=basic"
  #     - "xpack.security.enabled=false"
  #     - "xpack.watcher.enabled=false"
  #     - "xpack.graph.enabled=false"
  #     - "xpack.ml.enabled=false"
  #     - "bootstrap.memory_lock=true"
  #     - "cluster.name=es-mastodon"
  #     - "discovery.type=single-node"
  #     - "thread_pool.write.queue_size=1000"
  #   networks:
  #      - external_network
  #      - internal_network
  #   healthcheck:
  #      test: ["CMD-SHELL", "curl --silent --fail localhost:9200/_cluster/health || exit 1"]
  #   volumes:
  #      - ./elasticsearch:/usr/share/elasticsearch/data
  #   ulimits:
  #     memlock:
  #       soft: -1
  #       hard: -1
  #     nofile:
  #       soft: 65536
  #       hard: 65536
  #   ports:
  #     - '127.0.0.1:9200:9200'

  web:
    build: .
    image: cyborch/mastodon:v4.0.2-hometown-1.1.0
    restart: always
    env_file:
      - .env.production
      - db.env
    command: bash -c "rm -f /mastodon/tmp/pids/server.pid; bundle exec rails s -p 3000"
    networks:
      - traefik_proxy
      - internal_network
    healthcheck:
      # prettier-ignore
      test:
        [
          'CMD-SHELL',
          'wget -q --spider --proxy=off localhost:3000/health || exit 1'
        ]
    expose:
      - "3000"
    depends_on:
      - db
      - redis
    volumes:
      - ./public/system:/mastodon/public/system
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik_proxy
      - traefik.http.routers.mastodonweb.rule=Host(`tacocat.space`)
      - traefik.http.routers.mastodonweb.entrypoints=websecure
      - traefik.http.routers.mastodonweb.tls.certresolver=letsencrypttls
      - traefik.http.services.mastodonweb.loadbalancer.server.port=3000

  streaming:
    build: .
    image: cyborch/mastodon:v4.0.2-hometown-1.1.0
    restart: always
    env_file:
      - .env.production
      - db.env
    command: node ./streaming
    networks:
      - traefik_proxy
      - internal_network
    healthcheck:
      # prettier-ignore
      test:
        [
          'CMD-SHELL',
          'wget -q --spider --proxy=off localhost:4000/api/v1/streaming/health || exit 1'
        ]
    expose:
      - "4000"

    depends_on:
      - db
      - redis
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik_proxy
      - traefik.http.routers.mastodonstreaming.rule=(Host(`tacocat.space`) && PathPrefix(`/api/v1/streaming`))
      - traefik.http.routers.mastodonstreaming.entrypoints=websecure
      - traefik.http.routers.mastodonstreaming.tls.certresolver=letsencrypttls
      - traefik.http.services.mastodonstreaming.loadbalancer.server.port=4000

  sidekiq:
    build: .
    image: cyborch/mastodon:v4.0.2-hometown-1.1.0
    restart: always
    env_file:
      - .env.production
      - db.env
    command: bundle exec sidekiq
    depends_on:
      - db
      - redis
    networks:
      - traefik_proxy
      - internal_network
    volumes:
      - ./public/system:/mastodon/public/system
    healthcheck:
      test: [ 'CMD-SHELL', "ps aux | grep '[s]idekiq 6' || false" ]

networks:
  #the network that your traefik instance has access to
  traefik_proxy:
    external: true
  internal_network:
    internal: true
